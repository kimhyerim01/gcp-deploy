name: CI / CD

on:
  push:
    branches: [main]

jobs:
  CI:
    runs-on: ubuntu-latest

    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      IMAGE_NAME: goormthon // 임의로 변경 가능, 단 아래 IMAGE_NAME도 동일하게 변경
      IMAGE_TAG: ${{ github.sha }}


    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'adopt'

      - name: Google Cloud SDK 설정
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Docker를 위한 gcloud 인증 설정
        run: gcloud auth configure-docker --quiet

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build with Gradle(Test 제외)
        run: ./gradlew build --exclude-task test

      - name: Verify JAR file
        run: ls -la build/libs/

      - name: Docker 인증 구성
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker build --build-arg SPRING_PROFILE=prod -t us-central1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/docker/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          docker push us-central1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/docker/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
  CD:
    runs-on: ubuntu-latest
    needs: CI

    env:
      IMAGE_NAME: goormthon
      IMAGE_TAG: ${{ github.sha }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

    steps:
      - name: 서버에 .env.production 전송
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          source: ".env.production"
          target: "~/"

      - name: 서버에 SSH 접속하여 Docker 실행
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            IMAGE_NAME=goormthon
            IMAGE_TAG=${{ github.sha }}
            GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
            
            sudo docker network create --driver bridge app-network
            
            sudo docker stop $IMAGE_NAME || true
            sudo docker rm $IMAGE_NAME || true
            
            
            sudo docker login -u _json_key --password-stdin https://us-central1-docker.pkg.dev
            sudo docker pull us-central1-docker.pkg.dev/$GCP_PROJECT_ID/docker/$IMAGE_NAME:$IMAGE_TAG
            
            sudo docker run -d \
              --name $IMAGE_NAME \
              --network app-network \
              -p 8080:8080 \
              us-central1-docker.pkg.dev/$GCP_PROJECT_ID/docker/$IMAGE_NAME:$IMAGE_TAG
